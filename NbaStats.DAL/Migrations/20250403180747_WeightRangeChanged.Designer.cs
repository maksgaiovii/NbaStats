// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NbaStats.DAL.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NbaStats.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250403180747_WeightRangeChanged")]
    partial class WeightRangeChanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NbaStats.DAL.Data.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("matchid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MatchId"));

                    b.Property<int>("AwayScore")
                        .HasColumnType("integer")
                        .HasColumnName("awayscore");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("awayteamid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("HomeScore")
                        .HasColumnType("integer")
                        .HasColumnName("homescore");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("hometeamid");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("seasonid");

                    b.HasKey("MatchId")
                        .HasName("match_pkey");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("SeasonId");

                    b.ToTable("match", (string)null);
                });

            modelBuilder.Entity("NbaStats.DAL.Data.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("playerid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Height")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("height");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("position");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("teamid");

                    b.Property<decimal>("Weight")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("weight");

                    b.HasKey("PlayerId")
                        .HasName("player_pkey");

                    b.HasIndex("TeamId");

                    b.ToTable("player", (string)null);
                });

            modelBuilder.Entity("NbaStats.DAL.Data.PlayerSeasonAverage", b =>
                {
                    b.Property<int>("PlayerSeasonAveragesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("playerseasonaveragesid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerSeasonAveragesId"));

                    b.Property<decimal>("AvgAssists")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("avgassists")
                        .HasDefaultValueSql("0");

                    b.Property<decimal>("AvgBlocks")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AvgMinutesPlayed")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("avgminutesplayed")
                        .HasDefaultValueSql("0");

                    b.Property<decimal>("AvgPoints")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("avgpoints")
                        .HasDefaultValueSql("0");

                    b.Property<decimal>("AvgRebounds")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("avgrebounds")
                        .HasDefaultValueSql("0");

                    b.Property<decimal>("AvgSteals")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("avgsteals")
                        .HasDefaultValueSql("0");

                    b.Property<decimal>("AvgTurnovers")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("avgturnovers")
                        .HasDefaultValueSql("0");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("playerid");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("seasonid");

                    b.HasKey("PlayerSeasonAveragesId")
                        .HasName("playerseasonaverages_pkey");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("playerseasonaverages", (string)null);
                });

            modelBuilder.Entity("NbaStats.DAL.Data.PlayerStat", b =>
                {
                    b.Property<int>("PlayerStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("playerstatsid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerStatsId"));

                    b.Property<int>("Assists")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("assists");

                    b.Property<int>("Blocks")
                        .HasColumnType("integer");

                    b.Property<int>("FgAttempted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("fgattempted");

                    b.Property<int>("FgMade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("fgmade");

                    b.Property<int>("FreeThrowsAttempted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("freethrowsattempted");

                    b.Property<int>("FreeThrowsMade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("freethrowsmade");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("matchid");

                    b.Property<decimal>("MinutesPlayed")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("minutesplayed")
                        .HasDefaultValueSql("0");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("playerid");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("points");

                    b.Property<int>("Rebounds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("rebounds");

                    b.Property<int>("Steals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("steals");

                    b.Property<int>("ThreePointersAttempted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("threepointersattempted");

                    b.Property<int>("ThreePointersMade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("threepointersmade");

                    b.Property<int>("Turnovers")
                        .HasColumnType("integer");

                    b.HasKey("PlayerStatsId")
                        .HasName("playerstats_pkey");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("playerstats", (string)null);
                });

            modelBuilder.Entity("NbaStats.DAL.Data.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seasonid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeasonId"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("enddate");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("SeasonId")
                        .HasName("season_pkey");

                    b.HasIndex(new[] { "Year" }, "season_year_key")
                        .IsUnique();

                    b.ToTable("season", (string)null);
                });

            modelBuilder.Entity("NbaStats.DAL.Data.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("teamid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeamId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Conference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("conference");

                    b.Property<string>("Division")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("division");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("TeamId")
                        .HasName("team_pkey");

                    b.ToTable("team", (string)null);
                });

            modelBuilder.Entity("NbaStats.DAL.Data.TeamSeasonAverage", b =>
                {
                    b.Property<int>("TeamSeasonAveragesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("teamseasonaveragesid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeamSeasonAveragesId"));

                    b.Property<decimal>("AvgAssists")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("avgassists")
                        .HasDefaultValueSql("0");

                    b.Property<decimal>("AvgBlocks")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AvgPoints")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("avgpoints")
                        .HasDefaultValueSql("0");

                    b.Property<decimal>("AvgRebounds")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("avgrebounds")
                        .HasDefaultValueSql("0");

                    b.Property<decimal>("AvgSteals")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AvgTurnovers")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("avgturnovers")
                        .HasDefaultValueSql("0");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("seasonid");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("teamid");

                    b.HasKey("TeamSeasonAveragesId")
                        .HasName("teamseasonaverages_pkey");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("teamseasonaverages", (string)null);
                });

            modelBuilder.Entity("NbaStats.DAL.Data.TeamStat", b =>
                {
                    b.Property<int>("TeamStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("teamstatsid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeamStatsId"));

                    b.Property<int>("Assists")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("assists");

                    b.Property<int>("Blocks")
                        .HasColumnType("integer");

                    b.Property<int>("FgAttempted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("fgattempted");

                    b.Property<int>("FgMade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("fgmade");

                    b.Property<int>("FreeThrowsAttempted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("freethrowsattempted");

                    b.Property<int>("FreeThrowsMade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("freethrowsmade");

                    b.Property<int>("Losses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("losses");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("matchid");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("points");

                    b.Property<int>("Rebounds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("rebounds");

                    b.Property<int>("Steals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("steals");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("teamid");

                    b.Property<int>("ThreePointersAttempted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("threepointersattempted");

                    b.Property<int>("ThreePointersMade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("threepointersmade");

                    b.Property<int>("Turnovers")
                        .HasColumnType("integer");

                    b.Property<int>("Wins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("wins");

                    b.HasKey("TeamStatsId")
                        .HasName("teamstats_pkey");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("teamstats", (string)null);
                });

            modelBuilder.Entity("NbaStats.DAL.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.HasKey("UserId")
                        .HasName("user_pkey");

                    b.HasIndex(new[] { "Email" }, "user_email_key")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("NbaStats.DAL.Data.UserPreference", b =>
                {
                    b.Property<int>("UserPreferencesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userpreferencesid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserPreferencesId"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("playerid");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("teamid");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("UserPreferencesId")
                        .HasName("userpreferences_pkey");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.HasIndex("Userid");

                    b.ToTable("userpreferences", (string)null);
                });

            modelBuilder.Entity("NbaStats.DAL.Data.Match", b =>
                {
                    b.HasOne("NbaStats.DAL.Data.Team", "AwayTeam")
                        .WithMany("MatchAwayTeams")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("match_awayteamid_fkey");

                    b.HasOne("NbaStats.DAL.Data.Team", "HomeTeam")
                        .WithMany("MatchHomeTeams")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("match_hometeamid_fkey");

                    b.HasOne("NbaStats.DAL.Data.Season", "Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("match_seasonid_fkey");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("NbaStats.DAL.Data.Player", b =>
                {
                    b.HasOne("NbaStats.DAL.Data.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("player_teamid_fkey");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("NbaStats.DAL.Data.PlayerSeasonAverage", b =>
                {
                    b.HasOne("NbaStats.DAL.Data.Player", "Player")
                        .WithMany("PlayerSeasonAverages")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("playerseasonaverages_playerid_fkey");

                    b.HasOne("NbaStats.DAL.Data.Season", "Season")
                        .WithMany("PlayerSeasonAverages")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("playerseasonaverages_seasonid_fkey");

                    b.Navigation("Player");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("NbaStats.DAL.Data.PlayerStat", b =>
                {
                    b.HasOne("NbaStats.DAL.Data.Match", "Match")
                        .WithMany("PlayerStats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("playerstats_matchid_fkey");

                    b.HasOne("NbaStats.DAL.Data.Player", "Player")
                        .WithMany("PlayerStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("playerstats_playerid_fkey");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("NbaStats.DAL.Data.TeamSeasonAverage", b =>
                {
                    b.HasOne("NbaStats.DAL.Data.Season", "Season")
                        .WithMany("TeamSeasonAverages")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("teamseasonaverages_seasonid_fkey");

                    b.HasOne("NbaStats.DAL.Data.Team", "Team")
                        .WithMany("TeamSeasonAverages")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("teamseasonaverages_teamid_fkey");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("NbaStats.DAL.Data.TeamStat", b =>
                {
                    b.HasOne("NbaStats.DAL.Data.Match", "Match")
                        .WithMany("TeamStats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("teamstats_matchid_fkey");

                    b.HasOne("NbaStats.DAL.Data.Team", "Team")
                        .WithMany("TeamStats")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("teamstats_teamid_fkey");

                    b.Navigation("Match");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("NbaStats.DAL.Data.UserPreference", b =>
                {
                    b.HasOne("NbaStats.DAL.Data.Player", "Player")
                        .WithMany("UserPreferences")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userpreferences_playerid_fkey");

                    b.HasOne("NbaStats.DAL.Data.Team", "Team")
                        .WithMany("UserPreferences")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userpreferences_teamid_fkey");

                    b.HasOne("NbaStats.DAL.Data.User", "User")
                        .WithMany("UserPreferences")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userpreferences_userid_fkey");

                    b.Navigation("Player");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NbaStats.DAL.Data.Match", b =>
                {
                    b.Navigation("PlayerStats");

                    b.Navigation("TeamStats");
                });

            modelBuilder.Entity("NbaStats.DAL.Data.Player", b =>
                {
                    b.Navigation("PlayerSeasonAverages");

                    b.Navigation("PlayerStats");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("NbaStats.DAL.Data.Season", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("PlayerSeasonAverages");

                    b.Navigation("TeamSeasonAverages");
                });

            modelBuilder.Entity("NbaStats.DAL.Data.Team", b =>
                {
                    b.Navigation("MatchAwayTeams");

                    b.Navigation("MatchHomeTeams");

                    b.Navigation("Players");

                    b.Navigation("TeamSeasonAverages");

                    b.Navigation("TeamStats");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("NbaStats.DAL.Data.User", b =>
                {
                    b.Navigation("UserPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
