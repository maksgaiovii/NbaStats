@page
@model NbaStats.UAL.Pages.PlayerModel
@using NbaStats.BLL.Interfaces
@inject IPlayerService PlayerService
@inject IPlayerStatService PlayerStatService
@inject IPlayerSeasonAverageService PlayerSeasonAverageService
@inject IUserPreferenceService UserPreferenceService
@{
    Layout = null;
    var playerId = Convert.ToInt32(HttpContext.Request.Query["id"]);
    var player = await PlayerService.GetByIdAsync(playerId);
    var lastMatches = await PlayerStatService.GetPlayerStatsByPlayerAsync(playerId); // Assumes such a method exists
    var seasonAverages = await PlayerSeasonAverageService.GetPlayerSeasonAveragesByPlayerAsync(playerId); // Adjust season logic as needed
}
<div class="container mt-5">
    <div class="mb-4 text-center">
        <span class="header-title">@player.Name - Player Stats</span>
    </div>
    @if (IsSignedInHelper.IsSignedIn)
    {
        <form method="post" class="mt-3">
            <input type="hidden" name="playerId" value="@player.PlayerId" />
            <button type="submit" class="btn btn-warning">Add to Favourites</button>
        </form>
    }

    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Last 5 Matches</h4>
        </div>
        <ul class="list-group list-group-flush">
            @if (lastMatches != null && lastMatches.Any())
            {
                @foreach (var stat in lastMatches.Take(5))
                {
                    <li class="list-group-item">
                        <div class="row">
                            <div class="col"><strong>Points:</strong> @stat.Points</div>
                            <div class="col"><strong>Rebounds:</strong> @stat.Rebounds</div>
                            <div class="col"><strong>Assists:</strong> @stat.Assists</div>
                            <div class="col"><strong>Steals:</strong> @stat.Steals</div>
                            <div class="col"><strong>Blocks:</strong> @stat.Blocks</div>
                            <div class="col"><strong>Turnovers:</strong> @stat.Turnovers</div>
                        </div>
                        <div class="row mt-1">
                            <div class="col"><strong>FG:</strong> @stat.FgMade/@stat.FgAttempted</div>
                            <div class="col"><strong>3PT:</strong> @stat.ThreePointersMade/@stat.ThreePointersAttempted</div>
                            <div class="col"><strong>FT:</strong> @stat.FreeThrowsMade/@stat.FreeThrowsAttempted</div>
                        </div>
                    </li>
                }
            }
            else
            {
                <li class="list-group-item">No recent matches available.</li>
            }
        </ul>
    </div>
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-success text-white">
            <h4 class="mb-0">Season Averages</h4>
        </div>
        <ul class="list-group list-group-flush">
            @if (seasonAverages != null && seasonAverages.Any())
            {
                @foreach (var avg in seasonAverages)
                {
                    <li class="list-group-item">
                        <div class="row">
                            <div class="col"><strong>Season:</strong> @avg.Season.Year</div>
                            <div class="col"><strong>Points:</strong> @avg.AvgPoints</div>
                            <div class="col"><strong>Rebounds:</strong> @avg.AvgRebounds</div>
                            <div class="col"><strong>Assists:</strong> @avg.AvgAssists</div>
                            <div class="col"><strong>Steals:</strong> @avg.AvgSteals</div>
                            <div class="col"><strong>Blocks:</strong> @avg.AvgBlocks</div>
                            <div class="col"><strong>Turnovers:</strong> @avg.AvgTurnovers</div>
                        </div>
                    </li>
                }
            }
            else
            {
                <li class="list-group-item">No season averages available.</li>
            }
        </ul>
    </div>
    <div class="card shadow-sm">
        <div class="card-header bg-dark text-white">
            <h4 class="mb-0">Player Info</h4>
        </div>
        <div class="card-body">
            <h5 class="card-title">@player.Name</h5>
            <p class="card-text"><strong>Position:</strong> @player.Position</p>
            <p class="card-text"><strong>Height:</strong> @player.Height</p>
            <p class="card-text"><strong>Weight:</strong> @player.Weight</p>
            <p class="card-text"><strong>Birth Date:</strong> @player.BirthDate.ToString("yyyy-MM-dd")</p>
        </div>
    </div>
</div>
<style>
    body {
        background-color: #f8f9fa;
    }
    .container {
        max-width: 900px;
    }
    .header-title {
        font-weight: 600;
        font-size: 2rem;
        color: #343a40;
    }
    .card {
        border-radius: 0.75rem;
    }
    .card-header {
        font-size: 1.2rem;
        font-weight: 500;
    }
    .list-group-item {
        font-size: 1.05rem;
    }
    .row > .col {
        padding-bottom: 0.25rem;
    }
</style>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

